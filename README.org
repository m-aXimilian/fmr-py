#+title: Minimal FMR python-implementation
#+subtitle: with basic device support
#+author: Maximilian KÃ¼ffner

* Prerequisites
- Python3.# and pyvisa (~pip install pyvisa~)
- +NI-DAQmx Python API (~pip install nidaqmx~)+
- NI-DAQmx Pyhton API (~python -m pip install git+https://github.com/ni/nidaqmx-python.git~)[^fn-1]
- NIVisa
- pyyaml (~pip install pyyaml~)
- tqdm for progressbar (~pip install tqdm~)

[^fn-1]: ~Sequence~ moved from ~collections~ to ~collections.abc~ in Python 3.10 which yiedls include errors when using pip [[https://github.com/ni/nidaqmx-python/issues/129][nidaqmx issue 129]]

* Hints 
- make sure that ~pyvisa~ is aware of the NIVisa backend. If not, specify the path to the ~visa64.dll~ for the resource manager
- the path to the NIVisa backend can be set in a file called ~.pyvisarc~ (see [[https://pyvisa.readthedocs.io/en/latest/introduction/configuring.html][backend configuration]])
- see an example for reading and writing with an additional clock task at [[https://github.com/ni/nidaqmx-python/blob/master/nidaqmx/tests/test_read_write.py][nidaqmx tests]]


* Documentation
- [[https://pyvisa.readthedocs.io/en/latest/index.html][pyvisa man]]
- [[https://knowledge.ni.com/KnowledgeArticleDetails?id=kA00Z0000019Pf1SAE&l=de-DE][NI-DAQmx man]]
- [[https://github.com/ni/nidaqmx-python][nidaqmx python repo]]

* Measurement 

** DAQmx read and write values
Each channel type must be provided with its own task. Syncronization is handled via a dedicated task exploiting the device's internal clock (and trigger).

** Continuous Read 
In order to allow for contiuous input streams, the handler thread has to be kept busy
(i.e. by ~input()~ or ~sleep()~). If that is not done, the read task is terminated
before stream was read in!

** Sweeping with the FMRHandler
The main thread has to be kept on hold for at least 2 seconds before iterating. Otherwise, the resource is recognized occupied.
Currently, this is done implicitly by calling the plotting function, which holds the main thread by means of ~plt.pause()~.
#+BEGIN_SRC python
def start_FMR(self):
        """For every frequency defined in the parameters one measurement will be taken.
        If the start and the stop frequency are identical, there will be only one file."""
        for i in np.arange(self.params['rf-start'], 
            self.params['rf-stop'] + self.params['rf-step'], 
            self.params['rf-step']):
            self.params['rf-freq'] = i
            meas = FMRMeasurement(self.params)
            name, params = meas.f_name, meas.params
            tr = threading.Thread(target=FMRHandler.measure_thread, args=(meas,))
            tr.start()
            
            self.live_plot_subs(name, params)
#+END_SRC

** Continuous Plot
Because the matplotlib is *not threadsafe* it cannot be attached to a thread different than the main thread. To allow contiuous plotting anyway, the measurement and data writing is attached to a different thread. 


* ToDo
- [x] config-files for devices
- [x] implement measurement with a clock task
- [x] write the FMRHandler for FMRMeasurement class
- [x] contiuous measurement from multiple channels
- [x] implement contiuous measurement in the FMRMeasurement class (add callback and set the stream-reader entry point in the /start_measurement/ member function)
- [x] write a waveform generator
- [x] contiuously plot measurement data
